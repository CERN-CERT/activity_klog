					+---------------------------+
					+           netlog          +        
					+---------------------------+

Product name: 			netlog
Date:				Apr 5 2012
Version:			1.6
Vendor:				CERN
Author:				Panos Sakkos while at Computer Security Team 
CST Email:			cert-sec@cern.ch
Author Email:			<panos.sakkos@cern.ch> 
License: 			GPLv3	
						+-------+
						|License|
						+-------+

Copyright 2011 CERN. This software is distributed under the terms of the GNU General Public
Licence version 3 (GPL Version 3), copied verbatim in the file •ÀÏCOPYING•ÀÏ. In applying this licence,
CERN does not waive the privileges and immunities granted to it by virtue of its status as an 
Intergovernmental Organization or submit itself to any jurisdiction.


						+-----------+
						|Description|
						+-----------+

Netlog is a Loadable Kernel Module that logs information for every connection on the hosted machine.
By utilizing the kprobes API, it probes the connect and accept system calls ,for TCP connections,
as well as the bind system call, for UDP connections, and the socket destruction. 
While probing, it logs the process name and process id, the user id that owns this process, the protocol
(TCP/UDP), the local IP address and port as well as the remote IP address and port.

For UDP, it tracks only the bind system call, because UDP is a connectionless protocol,
so the other approach was to track the packet communication, something that would
add a lot of overhead. In order to compile the code that tracks UDP, you 
have to change the symbolic constant (PROBE_UDP) that it's defined in the netlog header (netlog.h) from
zero (0) to a non-zero value (i.e. 1).

Netlog also tracks the destruction of the sockets. This is done by probing the 
inet_shutdown kernel call, which is called after the close system call is called.
In order to compile the code that tracks the connection close, you need to change the value of the
symbolic constant (PROBE_CONNECTION_CLOSE) that is defined in the netlog header file (netlog.h) from 
zero (0) to a non-zero value (i.e. 1).

Whitelisting:

netlog offers whitelisting of executables. Change the symbolic constant WHITELISTING in netlog.h header
to 0 or 1, if you want to compile or not the whitelisting code accordingly. Then, add the full execution
path of the executables that you are interested in wtelisting at the netlog.h header.

					+--------------------------+
					|Supported kernel versions |
					+--------------------------+
2.6.12 up to 3.3.0

					+--------------------------+
					|Format of the log messages|
					+--------------------------+

TCP connect:
Dec 19 14:03:17 panos-PC kernel: netlog: http[3206] TCP 137.138.191.167:52507 -> 130.59.10.36:80 (uid=0)

TCP accept:
Dec 19 14:18:37 panos-PC kernel: netlog: sshd[827] TCP 137.138.191.167:22 <- 137.138.32.18:49904 (uid=0)

UDP binds:
Dec 19 14:22:50 panos-PC kernel: netlog: skype[4261] UDP bind 127.0.0.1:0 (uid=1000)
Dec 19 14:22:50 panos-PC kernel: netlog: skype[4261] UDP bind (any IP address):2752 (uid=1000)

Connection close:
Dec 19 14:19:07 panos-PC kernel: netlog: sshd[3755] TCP 137.138.191.167:22 <-> 137.138.32.18:49904 (uid=0)

						+--------------+
						|How to compile|
						+--------------+

In the source directory run:

	make -C /lib/modules/$(uname -r)/build M=$PWD

Then run:

	insmod netlog.ko

in order to insert the module in the kernel.
And in order to remove it, run:

	rmmod netlog

					+------------------------------+
					|Before reading the source code|
					+------------------------------+

First of all you have to be experienced with the C language and by experienced I mean at least to
be familiar with pointers. Also you need to know how the system calls are handled from the Linux Kernel
and to be familiar with the inet level of the kernel source code. For the last thing, grep is your friend.
Furthermore you have to know how kprobes works (or at least its API).

						+----------+
						|References|
						+----------+

Linux Source Code:
	http://www.kernel.org/

Kernel instrumentation using kprobes:
	http://www.phrack.org/issues.html?issue=67&id=6

Scientific Linux CERN
	http://linux.web.cern.ch/linux/

						+----------+
						|   TODO   |
						+----------+

*Dynamic whitelisting support
