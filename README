
									+---------------------------+
									+           netlog          +        
									+---------------------------+

Product name: 		netlog
Date:				Dec 19 2011
License:			GPL
Version:			1.0
Author:				Panos Sakkos while at Computer Security Team 
CST Email:			cert-sec@cern.ch
Author Email:		<panos.sakkos@cern.ch> 

											+------------+
											|Introduction|
											+------------+

In the Computer Security Team, we need to track the incoming and outgoing connections of our
production machines and associate them with the process that established them, as well as with
the users that own these processes. Our production machines, are pushed to their limits, so we
needed something stealth enough in order to work for our needs. The present work is a Loadable
Kernel Module that implements the behaviour of a netlog software. Our machines run a redhat flavour
called Scientific Linux CERN, so the current work is developed for machines running redhat distros*.

*I am mentioning this, because some names of structure data members change.
 so if you want to compile it for another distribution you will need to do some changes in the code.

											+-----------+
											|Description|
											+-----------+

Netlog is a Loadable Kernel Module that logs information for every connection.
With the help of kprobes API, it tracks the connect and accept system calls and 
in case that the connection is a TCP one, it logs the process name and Process ID, 
the User ID that owns this process, the protocol (TCP), the local IP address and port as well
as the remote IP address and port.

For UDP, it tracks the bind system call, because UDP is a connectionless protocol,
so the other approach was to track the packet communication, something that would
ad a lot of overhead. The data that is logged, is the process name and Process ID,
the Used ID of the process owner, the protocol (UDP) and the information about the IP address
and port that bind holds at its parameters. In order to compile the code that tracks UDP, you 
have to change the symbolic constant (PROBE_UDP) that it's defined in the netlog header (netlog.h) from
zero (0) to a non-zero value (i.e. 1).

Netlog also tracks the destruction of the sockets. This is done by probing the 
inet_shutdown kernel call, which is called after the close system call is called.
If the socket is created for a TCP protocol or a UDP (if UDP probing is true) it
logs the process name and Process ID that created it, as well as the Used ID that owns this
process, the protocol (TCP or UDP), the local IP address and port and the remote IP address and port.
in order to compile the code that tracks the connection close, you need to change the value of the
symbolic constant (PROBE_CONNECTION_CLOSE) that is defined in the netlog header file (netlog.h) from 
zero (0) to a non-zero value.

									+--------------------------+
									|Format of the log messages|
									+--------------------------+

TCP connect:
Dec 19 14:03:17 panos-PC kernel: [ 1341.648413] netlog: http[3206] TCP 137.138.191.167:52507 -> 130.59.10.36:80 (uid=0)

TCP accept:
Dec 19 14:18:37 panos-PC kernel: [ 2262.125936] netlog: sshd[827] TCP 137.138.191.167:22 <- 137.138.32.18:49904 (uid=0)

UDP binds:
Dec 19 14:22:50 panos-PC kernel: [ 2515.081074] netlog: skype[4261] UDP bind 127.0.0.1:0 (uid=1000)
Dec 19 14:22:50 panos-PC kernel: [ 2515.271375] netlog: skype[4261] UDP bind  (any ip address):2752 (uid=1000)

Connection close:
Dec 19 14:19:07 panos-PC kernel: [ 2292.580879] netlog: sshd[3755] TCP 137.138.191.167:22 <-> 137.138.32.18:49904 (uid=0)

										+--------------+
										|How to compile|
										+--------------+

In the source directory run:

	make -C /lib/modules/$(uname -r)/build M=$PWD

Then run:

	insmod netlog.ko

in order to isnert the module in the kernel.
And in order to remove it, run:

	rmmod netlog

									+------------------------------+
									|Before reading the source code|
									+------------------------------+

First of all you have to be experienced with the C language and by experienced I mean at least to
be familiar with pointers. Also you need to know how the system calls are handled from the Linux Kernel
and to be familiar with the inet level of the kernel source code. For the last thing, grep is your friend.\
Furthermore you have to be know the kprobes library.

											+----------+
											|References|
											+----------+

Linux Source Code:
	http://www.kernel.org/

Article from RedHat about kprobes
	http://www.redhat.com/magazine/005mar05/features/kprobes/

Scientific Linux CERN
	http://linux.web.cern.ch/linux/
	
											+----------+
											|   TODO   |
											+----------+

With the current approach of tracking the connection close, if the process doesn't call the 
close system call, the tracking cannot be done. So I have to find the kernel call (if any)
that is called even if the close system call is not called, in order to destroy the socket.

